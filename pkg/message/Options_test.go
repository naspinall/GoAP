package messages

import (
	"reflect"
	"testing"
)

func TestEncodeSingleOption(t *testing.T) {
	type args struct {
		delta uint
		b     []byte
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr bool
	}{
		{
			name: "Small Delta and Small Length",
			args: args{
				delta: 0x1,
				b:     []byte{0x1},
			},
			want:    []byte{0x11, 0x1},
			wantErr: false,
		},
		{
			name: "Large Delta and Small Length",
			args: args{
				delta: 0x0D,
				b:     []byte{0x1},
			},
			want:    []byte{0x1D, 0x00, 0x1},
			wantErr: false,
		},
		{
			name: "Large Delta With Difference and Small Length",
			args: args{
				delta: 0x0F,
				b:     []byte{0x1},
			},
			want:    []byte{0x1D, 0x02, 0x1},
			wantErr: false,
		},
		{
			name: "Small Delta and Large Length",
			args: args{
				delta: 0x01,
				b:     []byte{0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1},
			},
			want:    []byte{0xD1, 0x00, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1},
			wantErr: false,
		},
		{
			name: "Small Delta and Large Length With Difference",
			args: args{
				delta: 0x01,
				b:     []byte{0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1},
			},
			want:    []byte{0xD1, 0x02, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1},
			wantErr: false,
		},
		{
			name: "Large Delta and Large Length",
			args: args{
				delta: 0x0D,
				b:     []byte{0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1},
			},
			want:    []byte{0xDD, 0x00, 0x00, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1},
			wantErr: false,
		},
		{
			name: "Large Delta with Difference and Large Length with Difference",
			args: args{
				delta: 0x0D,
				b:     []byte{0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1},
			},
			want:    []byte{0xDD, 0x00, 0x02, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := EncodeSingleOption(tt.args.delta, tt.args.b)
			if (err != nil) != tt.wantErr {
				t.Errorf("EncodeSingleOption() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("EncodeSingleOption() = %v, want %v", got, tt.want)
			}
		})
	}
}
